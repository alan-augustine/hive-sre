/*
 * Copyright (c) 2022. Cloudera, Inc. All Rights Reserved
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package com.cloudera.utils.common;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.*;

public class CompressionUtilTest {
    private CompressionUtil cu = CompressionUtil.getInstance();
    private ObjectMapper om = new ObjectMapper();

    @Test
    public void testGet_001() throws JsonProcessingException {
        // dag plan
        String byteStr
        byte[] val = stringToByteA(byteStrA);
        ObjectNode dagPlan = cu.getValue(val, ObjectNode.class);
        System.out.println(om.writeValueAsString(dagPlan));
    }

    @Test
    public void testGet_002() throws JsonProcessingException {
        String explainba
        byte[] expBA = stringToByteA(explainba);
        ObjectNode explainPlan = cu.getValue(expBA, ObjectNode.class);
        System.out.println(om.writeValueAsString(explainPlan));
    }

    protected byte[] stringToByteA(String strByteA) {
        byte[] val = new byte[strByteA.length()/2];
        for (int i = 0; i < val.length; i++) {
            int index = i * 2;
            int j = Integer.parseInt(strByteA.substring(index, index + 2), 16);
            val[i] = (byte) j;
        }
        return val;
    }
}